<?php

use Drupal\Core\Render\Element;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_theme().
 */
function imagefield_crop_theme() {
  return array(
    'imagefield_crop_widget' => array(
      'render element' => 'element',
    ),
    'imagefield_crop_preview' => array(
      'render element' => 'element',
    ),
  );
}

function template_preprocess_imagefield_crop_widget(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
  }

  $variables['data'] = array();
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

function template_preprocess_imagefield_crop_preview(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = array('class' => array('preview-existing'));

  $style = ImageStyle::load($element['#style_name']);

  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $element['#width'],
    'height' => $element['#height'],
  );

  $style->transformDimensions($dimensions, $variables['uri']);

  $element['#width'] = $dimensions['width'];
  $element['#height'] = $dimensions['height'];

  $element['preview_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'style' => 'width:' . $element['#width'] . 'px;height:' . $element['#height'] . 'px;overflow:hidden;',
      'class' => array(
        'jcrop-preview-wrapper',
      ),
    ),
    'image' => array(
      '#theme' => 'image_style',
      '#width' => $element['#width'],
      '#height' => $element['#height'],
      '#style_name' => $element['#style_name'],
      '#uri' => $element['#uri'],
      '#alt' => 'jcrop-preview',
      '#attributes' => array('class' => 'jcrop-preview'),
    ),
  );

  $variables['data'] = array();
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

function imagefield_crop_get_file_info($fid) {
  $db = \Drupal::database();
  $fileInfo = $db->select('imagefield_crop', 'ifc')
    ->fields('ifc')
    ->condition('fid', $fid)
    ->execute()
    ->fetchAllAssoc('fid', PDO::FETCH_NAMED);

  if ($fileInfo && isset($fileInfo[$fid])) {
    return $fileInfo[$fid];
  }

  return FALSE;
}

function imagefield_crop_update_file_info($info) {
  $values = [];
  $db = \Drupal::database();
  $defaults = array(
    'x'       => 0,
    'y'       => 0,
    'width'   => 50,
    'height'  => 50,
    'changed' => 0,
  );
  // applies default values if no value has been received
  foreach($info as $k => $v)
    if(is_nan($v) || $v === NAN || $v === 'NaN' || !isset($v))
      $values[$k] = $defaults[$k];
    else
      $values[$k] = $v;

  $query = $db
    ->upsert('imagefield_crop')
    ->key('fid')
    ->fields(array('fid', 'x', 'y', 'width', 'height'))
    ->values($values)
    ->execute();

  return $query;
}
